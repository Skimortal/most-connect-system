security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
#        users_in_memory: { memory: null }
        app_user_provider:
            entity:
                class: App\Entity\User
                property: username
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            form_login:
                login_path: app_login
                check_path: app_login
                default_target_path: app_dashboard
            logout:
                path: app_logout
                target: app_login

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/dashboard, roles: ROLE_USER }

        # --- Öffentlich ---
        - { path: ^/login$,  roles: PUBLIC_ACCESS }
        - { path: ^/logout$, roles: PUBLIC_ACCESS }

        # --- Strengeres zuerst: Lösch-Endpunkte ---
        - { path: ^/company/address/delete/\d+$, roles: ROLE_ADMIN }
        - { path: ^/(company|customer|invoice|tax_rate|user)/\d+$, roles: ROLE_ADMIN }
        # Hinweis: Deine *delete*-Routen liegen genau auf /{resource}/{id}

        # --- Schreibend: new/edit ---
        - { path: ^/(company|customer|invoice|tax_rate|user)/new$, roles: ROLE_EDITOR }
        - { path: ^/(company|customer|invoice|tax_rate|user)/\d+/edit$, roles: ROLE_EDITOR }
        - { path: ^/company/\d+/address/new$, roles: ROLE_EDITOR }
        - { path: ^/company/address/\d+$, roles: ROLE_EDITOR }     # address edit

        # --- Spezialfälle Rechnungen ---
        - { path: ^/invoice/\d+/send-pdf$, roles: ROLE_EDITOR }    # z.B. Mailversand nur Editor+
        - { path: ^/invoice/\d+/pdf$,      roles: ROLE_USER }      # PDF anzeigen darf jeder eingeloggte

        # --- Lesen/Listen & sonstige Seiten ---
        - { path: ^/(company|customer|invoice|tax_rate|user)$, roles: ROLE_USER }
        - { path: ^/(|dashboard|me)$, roles: ROLE_USER }           # "/", "/dashboard", "/me"

        # --- Fallback: alles andere erfordert Login ---
        - { path: ^/, roles: ROLE_USER }

    role_hierarchy:
        ROLE_SUPERUSER: [ ROLE_ADMIN ]
        ROLE_ADMIN: [ ROLE_EDITOR ]
        ROLE_EDITOR: [ ROLE_USER ]

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
