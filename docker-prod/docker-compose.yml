version: '3.8'

services:
    php:
        build:
            context: .
            dockerfile: Dockerfile
        container_name: ${PHP_CONTAINER_NAME}
        working_dir: /var/www/html 
        volumes:
            - ${APP_PATH}:/var/www/html:cached
            - ./conf/custom.ini:/usr/local/etc/php/conf.d/custom.ini
            - ${APP_PATH}/var/log:/var/www/html/var/log
            - ${APP_PATH}/var/tmp:/var/www/html/var/tmp
        depends_on:
            - db
        env_file:
            - .env.docker
        networks:
            webnet:
                aliases:
                    - ineasy_php

    nginx:
        image: nginx:${NGINX_VERSION}
        container_name: ${NGINX_CONTAINER_NAME}
        volumes:
            - ${APP_PATH}:/var/www/html:cached
            - ./conf/vhost.conf:/etc/nginx/conf.d/default.conf:ro
            - ${APP_PATH}/var/log:/var/www/html/var/log
            - ${APP_PATH}/var/tmp:/var/www/html/var/tmp
        depends_on:
            - php
        tmpfs:
            - /var/cache/nginx   
        command: >
            sh -c '
              if id -u nginx >/dev/null 2>&1; then U=nginx; else U=www-data; fi;
              mkdir -p /var/cache/nginx/{client_temp,proxy_temp,fastcgi_temp} &&
              chown -R "$U:$U" /var/cache/nginx &&
              exec nginx -g "daemon off;"'
        networks:
            webnet:
                aliases:
                    - ineasy_nginx

    db:
        image: ${DB_IMAGE}
        container_name: ${DB_CONTAINER_NAME}
        environment:
            MYSQL_RANDOM_ROOT_PASSWORD: "yes"
            MYSQL_DATABASE: ${MYSQL_DATABASE}
            MYSQL_USER: ${MYSQL_USER}
            MYSQL_PASSWORD: ${MYSQL_PASSWORD}
        volumes:
            - ${DB_PATH}:/var/lib/mysql
        healthcheck:
            test: [ "CMD-SHELL", "mysqladmin ping -h 127.0.0.1 -u$${MYSQL_USER} -p$${MYSQL_PASSWORD} --silent" ]
            interval: 5s
            timeout: 3s
            retries: 20
        env_file:
            - .env.docker
        networks:
            - webnet

    worker:
        build:
            context: .
            dockerfile: Dockerfile
        container_name: ${ineasy_worker}
        working_dir: /var/www/html
        command: >
            php bin/console messenger:consume async
            --time-limit=3600
            --memory-limit=128M
            --keepalive=60
            --no-interaction
            -vv
        volumes:
            - ${APP_PATH}:/var/www/html:cached
        depends_on:
            db:
                condition: service_healthy
        env_file:
            - .env.docker
        restart: unless-stopped
        networks:
            - webnet

networks:
    webnet:
        external: true
